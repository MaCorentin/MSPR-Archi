@page "/"
@using System.Net.Mail
@using System.Net
@inject TokenService tokenService
@inject NavigationManager navigation
<div class="page GooseGround">
    <div class="login-wrap" style="margin-top: 50px;">
		<EditForm Model="tokenService.user" OnValidSubmit="HandleValidSubmit" class="login-html">
		<input id="tab-1" type="radio" name="tab" class="sign-in" checked><label for="tab-1" class="tab">Connexion</label>
		<input id="tab-2" type="radio" name="tab" class="sign-up"><label for="tab-2" class="tab" style="visibility:hidden">Sign Up</label>
		<div class="login-form">
			<div class="sign-in-htm">
				<div class="group">
					<label for="user" class="label">Identifiant</label>
						<InputText @bind-Value=tokenService.user.username id="user" type="text" class="input" />
				</div>
				<div class="group">
					<label for="pass" class="label">Mot de passe</label>
						<InputText id="pass" @bind-Value=tokenService.user.password type="password" class="input" data-type="password" />
				</div>
				<div class="group">
					<input id="check" type="checkbox" class="check" checked>
					<label for="check"><span class="icon"></span> Rester connecté</label>
				</div>
				<div class="group">
					<input type="submit" class="button" value="Connexion">
				</div>
				<div class="hr"></div>
			
			</div>
		
		</div>
	</EditForm>
		<div class="alert alert-danger @alert">Infos de connexion incorrect</div>
</div>
</div>
@code {
	string alert = "d-none";

	private async void HandleValidSubmit()
	{
		try
		{
			DirectoryEntry entry = new DirectoryEntry("LDAP://academy",
				tokenService.user.username, tokenService.user.password);
			var connection = entry.NativeObject ?? null;
			alert = "d-none";
			Random rnd = new Random();
			await tokenService.InsertTokenAsync(new TokenModel
				{
					userId = tokenService.user.username,
					token = rnd.Next(100000, 999999).ToString(),
					created_on = DateTime.Now,
					expire_on = DateTime.Now.AddMinutes(15)
				});
			navigation.NavigateTo("Confirmation");

		}
		catch (DirectoryServicesCOMException)
		{
			alert = "";

		}
		StateHasChanged();


	}

	public static void SendEmail()
	{
		Console.WriteLine("My debug output.");
		try
		{
			MailMessage mailMessage = new MailMessage();
			MailAddress fromAddress = new MailAddress("louistitan80@outlook.fr");
			mailMessage.From = fromAddress;
			mailMessage.To.Add("muguet.louis@outlook.fr");
			mailMessage.Body = "tttttest";
			mailMessage.IsBodyHtml = true;
			mailMessage.Subject = "email de test";
			SmtpClient smtpClient = new SmtpClient();
			smtpClient.Host = "localhost";
			smtpClient.DeliveryMethod = SmtpDeliveryMethod.SpecifiedPickupDirectory;
			smtpClient.PickupDirectoryLocation = "C:/testMail";
			smtpClient.Send(mailMessage);

		}
		catch(Exception ex)
		{
		}

	}
}


