@page "/"
@using System.Net.Mail
@using System.Net
@inject TokenService tokenService
@inject NavigationManager navigation
<div class="page GooseGround">
    <div class="login-wrap" style="margin-top: 50px;">
		<EditForm Model="tokenService.user" OnValidSubmit="HandleValidSubmit" class="login-html">
		<input id="tab-1" type="radio" name="tab" class="sign-in" checked><label for="tab-1" class="tab">Connexion</label>
		<input id="tab-2" type="radio" name="tab" class="sign-up"><label for="tab-2" class="tab" style="visibility:hidden">Sign Up</label>
		<div class="login-form">
			<div class="sign-in-htm">
				<div class="group">
					<label for="user" class="label">Identifiant</label>
						<InputText @bind-Value=tokenService.user.username id="user" type="text" class="input" />
				</div>
				<div class="group">
					<label for="pass" class="label">Mot de passe</label>
						<InputText id="pass" @bind-Value=tokenService.user.password type="password" class="input" data-type="password" />
				</div>
				<div class="group">
					<input id="check" type="checkbox" class="check" checked>
					<label for="check"><span class="icon"></span> Rester connecté</label>
				</div>
				<div class="group">
					<input type="submit" class="button" value="Connexion">
				</div>
				<div class="hr"></div>
			
			</div>
		
		</div>
	</EditForm>
		<div class="alert alert-danger @alert">Infos de connexion incorrect</div>
</div>
</div>
@code {
	string alert = "d-none";
	Random rnd = new Random();
	private async void HandleValidSubmit()
	{
		try
		{
			DirectoryEntry entry = new DirectoryEntry("LDAP://academy",
				tokenService.user.username, tokenService.user.password);
				string initoken = rnd.Next(100000, 999999).ToString();  
			var connection = entry.NativeObject ?? null;
			alert = "d-none";
			DirectorySearcher search = new DirectorySearcher(entry);
			search.Filter = "(&(objectClass=user)(anr=" + tokenService.user.username + "))";
			search.PropertiesToLoad.Add("mail");           
			SearchResult result = search.FindOne();
			List<string> test = new List<string>();
			foreach (SearchResult sResultSet in search.FindAll())
			{
				if (sResultSet.Properties["mail"].Count > 0)
					test.Add(sResultSet.Properties["mail"][0].ToString() + "<br/>");
			}
			
			
			await tokenService.InsertTokenAsync(new TokenModel
				{
					userId = tokenService.user.username,
					token = initoken,
					created_on = DateTime.Now,
					expire_on = DateTime.Now.AddMinutes(15)
				});
            SendEmail("mailUtil1616@outlook.fr", initoken);
            navigation.NavigateTo("Confirmation");
           
        }
        catch (DirectoryServicesCOMException)
        {
            alert = "";

        }
        StateHasChanged();


    }

    public static void SendEmail(string userMail,string token)
    {


        Console.WriteLine("My debug output.");
        try
		{
			MailMessage mailMessage = new MailMessage();
			MailAddress fromAddress = new MailAddress("support@outlook.fr");
			mailMessage.From = fromAddress;
			mailMessage.To.Add(@userMail);
			mailMessage.Body = "Bonjour, votre code est :" + @token;
			mailMessage.IsBodyHtml = true;
			mailMessage.Subject = "Code authentification";
			SmtpClient smtpClient = new SmtpClient();
			smtpClient.Host = "localhost";
			smtpClient.DeliveryMethod = SmtpDeliveryMethod.SpecifiedPickupDirectory;
			smtpClient.PickupDirectoryLocation = "C:/testMail";
			smtpClient.Send(mailMessage);

		}
		catch(Exception ex)
		{
		}

	}
}


